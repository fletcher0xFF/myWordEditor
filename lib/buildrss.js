var urlGetRssEnclosureInfo = "http://pub2.fargo.io:5347/getEnclosureInfo?url=";

function getRssEnclosureInfo (obj, callback) {
	var jxhr = $.ajax ({ 
		url: urlGetRssEnclosureInfo + encodeURIComponent (obj.enclosure.url),
		dataType: "jsonp", 
		timeout: 30000,
		jsonpCallback : "getData"
	}) 
	.success (function (data, status) { 
		if (data.flError != undefined) { //2/15/14 by DW
			obj.enclosure.flError = true;
		} else {
			obj.enclosure.type = data.type;
			obj.enclosure.length = data.length;
			if (callback != undefined) {
				callback ();
			}
		}
	}) 
	.error (function (status) { 
		console.log ("getEnclosureInfo: Error getting type and length -- " + jsonStringify (status));
		obj.enclosure.flError = true;
	});
}
function buildRssFeed (headElements, historyArray) {
	function encode (s) {
		var lines = encodeXml (s).split (String.fromCharCode (10));
		var returnedstring = "";
		for (var i = 0; i < lines.length; i++) {
			returnedstring += trimWhitespace (lines [i]);
			if (i < (lines.length - 1)) {
				returnedstring += "&#10;";
			}
		}
		return (returnedstring);
	}
	function whenMostRecentTweet () {
		if (historyArray.length > 0) {
			return (new Date (historyArray [0].when));
		} else {
			return (new Date (0));
		}
	}
	function buildOutlineXml (theOutline) {
		function addOutline (outline) {
			var s = "<source:outline";
			function hasSubs (outline) {
				return (outline.subs != undefined) && (outline.subs.length > 0);
			}
			function addAtt (name) {
				if (outline [name] != undefined) {
					s += " " + name + "=\"" + encode (outline [name]) + "\" ";
				}
			}
			addAtt ("text");
			addAtt ("type");
			addAtt ("created");
			addAtt ("name");
			
			if (hasSubs (outline)) {
				add (s + ">");
				indentlevel++;
				for (var i = 0; i < outline.subs.length; i++) {
					addOutline (outline.subs [i]);
				}
				add ("</source:outline>");
				indentlevel--;
			} else {
				add (s + "/>");
			}
		}
		addOutline (theOutline);
		return (xmltext);
	}
	function markdownProcess (s) { //7/24/15 by DW
		var md = new Markdown.Converter (), theList = s.split ("</p><p>"), markdowntext = "";
		for (var i = 0; i < theList.length; i++) {
			var lt = theList [i];
			if ((lt.length > 0) && (lt != "<p>") && (lt != "</p>")) {
				markdowntext += "<p>" + md.makeHtml (lt) + "</p>";
			}
		}
		return (markdowntext);
	}
	var xmltext = "", indentlevel = 0, starttime = new Date (); nowstring = starttime.toGMTString ();
	var username = headElements.twitterScreenName, maxitems = headElements.maxFeedItems;
	function add (s) {
		xmltext += filledString ("\t", indentlevel) + s + "\n";
	}
	function addAccount (servicename, username) {
		if ((username != undefined) && (username.length > 0)) { 
			add ("<source:account service=\"" + encode (servicename) + "\">" + encode (username) + "</source:account>");
		}
	}
	add ("<?xml version=\"1.0\"?>")
	add ("<!-- RSS generated by " + headElements.appDomain + " on " + nowstring + " -->")
	add ("<rss version=\"2.0\" xmlns:source=\"http://source.smallpict.com/2014/07/12/theSourceNamespace.html\">"); indentlevel++
	add ("<channel>"); indentlevel++;
	//add header elements
		add ("<title>" + encode (headElements.title) + "</title>");
		add ("<link>" + encode (headElements.link) + "</link>");
		add ("<description>" + encode (headElements.description) + "</description>");
		add ("<pubDate>" + whenMostRecentTweet ().toUTCString () + "</pubDate>"); 
		add ("<lastBuildDate>" + nowstring + "</lastBuildDate>");
		add ("<language>" + encode (headElements.language) + "</language>");
		add ("<generator>" + headElements.generator + "</generator>");
		add ("<docs>" + headElements.docs + "</docs>");
		
		//<cloud> element -- 6/5/15 by DW
			if (headElements.flRssCloudEnabled) {
				add ("<cloud domain=\"" + headElements.rssCloudDomain + "\" port=\"" + headElements.rssCloudPort + "\" path=\"" + headElements.rssCloudPath + "\" registerProcedure=\"" + headElements.rssCloudRegisterProcedure + "\" protocol=\"" + headElements.rssCloudProtocol + "\" />")
			}
		
		addAccount ("twitter", username); 
	//add items
		var ctitems = 0;
		for (var i = 0; (i < historyArray.length) && (ctitems < maxitems); i++) {
			var item = historyArray [i], itemcreated = twTwitterDateToGMT (item.when), itemtext = encode (item.text);
			var linktotweet = encode ("https://twitter.com/" + username + "/status/" + item.idTweet);
			add ("<item>"); indentlevel++;
			if (item.title !== undefined) { //3/4/15 by DW
				add ("<title>" + encode (item.title) + "</title>"); 
			}
			//description -- 3/26/15 by DW
				if (getBoolean (item.flMarkdown)) {
					if (getBoolean (item.flPgfLevelMarkdown)) { //7/24/15 by DW
						add ("<description>" + encode (markdownProcess (item.text)) + "</description>"); 
					} else {
						add ("<description>" + encode (new Markdown.Converter ().makeHtml (item.text)) + "</description>"); 
					}
				} else {
					add ("<description>" + encode (item.text) + "</description>"); 
				}
			add ("<pubDate>" + itemcreated + "</pubDate>"); 
			//link -- 8/12/14 by DW
				if (item.link != undefined) {
					add ("<link>" + encode (item.link) + "</link>"); 
				} else {
					add ("<link>" + linktotweet + "</link>"); 
				}
			//source:linkShort -- 8/26/14 by DW
				if (item.linkShort != undefined) {
					add ("<source:linkShort>" + encode (item.linkShort) + "</source:linkShort>"); 
				}
			//guid -- 8/12/14 by DW
				if (item.guid != undefined) {
					if (getBoolean (item.guid.flPermalink)) {
						add ("<guid>" + encode (item.guid.value) + "</guid>"); 
					} else {
						add ("<guid isPermaLink=\"false\">" + encode (item.guid.value) + "</guid>"); 
					}
				} else {
					add ("<guid>" + linktotweet + "</guid>"); 
				}
			//enclosure -- 8/11/14 by DW
				if (item.enclosure != undefined) {
					var enc = item.enclosure;
					if ((enc.url != undefined) && (enc.type != undefined) && (enc.length != undefined)) {
						add ("<enclosure url=\"" + enc.url + "\" type=\"" + enc.type + "\" length=\"" + enc.length + "\"/>");
					}
				}
			//source:markdown -- 3/26/15 by DW
				if (getBoolean (item.flMarkdown)) {
					add ("<source:markdown>" + itemtext + "</source:markdown>"); 
				}
			//source:jsonUrl -- 3/24/15 by DW
				if (item.linkJson !== undefined) {
					add ("<source:linkJson>" + encode (item.linkJson) + "</source:linkJson>"); 
				}
			//source:outline
				if (item.outline != undefined) { //10/15/14 by DW
					buildOutlineXml (item.outline);
				} else {
					if (item.idTweet != undefined) {
						add ("<source:outline text=\"" + itemtext + "\" created=\"" + itemcreated + "\" type=\"tweet\" tweetId=\"" + item.idTweet + "\" tweetUserName=\"" + encode (item.twitterScreenName) + "\"/>");
					}
					if (item.enclosure != undefined) { //9/23/14 by DW
						var enc = item.enclosure;
						if (enc.type != undefined) { //10/25/14 by DW
							if (beginsWith (enc.type.toLowerCase (), "image")) {
								add ("<source:outline text=\"" + itemtext + "\" created=\"" + itemcreated + "\" type=\"image\" url=\"" + enc.url + "\"/>");
							}
						}
					}
				}
			add ("</item>"); indentlevel--;
			ctitems++;
		}
	add ("</channel>"); indentlevel--;
	add ("</rss>"); indentlevel--;
	return (xmltext);
}
